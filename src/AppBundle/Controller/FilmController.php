<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Category;
use AppBundle\Entity\Commentary;
use AppBundle\Entity\Films;
use AppBundle\Entity\User;
use AppBundle\Repository\UserRepository;
use AppBundle\Form\FilmType;
use AppBundle\Manager\UserManager;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Manager\FilmManager;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\HttpFoundation\File\UploadedFile;


class FilmController extends Controller
{
    /**
     * @Route("/films", name="films")
     */
    public function listMovies()
    {
        $em = $this->getDoctrine()->getManager();
        $films = $em->getRepository(Films::class)->findAll();
        $category = $em->getRepository(Category::class)->findAll();
        return $this->render('media/films.html.twig',[
            'films' => $films,
            'categories' => $category
        ]);
    }



    /**
     * @Route("/film/new", name="app_film_new")
     */
    public function uploadAction(Request $request, FilmManager $filmManager)
    {
        $film = new Films();
        $form = $this->createForm(FilmType::class, $film);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            // $file stores the uploaded PDF file
            /** @var Symfony\Component\HttpFoundation\File\UploadedFile $file */
            $file = $film->getBrochure();

            $video = $film->getVideo();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();
            $filevideo = $this->generateUniqueFileName().'.'.$video->guessExtension();

            // moves the file to the directory where brochures are stored
            $file->move(
                $this->getParameter('brochures_directory'),
                $fileName
            );

            $video->move(
                $this->getParameter('video_directory'),
                $filevideo
            );

            // updates the 'brochure' property to store the PDF file name
            // instead of its contents
            $film->setBrochure($fileName);
            $film->setVideo($filevideo);

            // ... persist the $film variable or any other work

            $filmManager->addFilm($film, $video);

            return $this->redirect($this->generateUrl('films'));
        }

        return $this->render('media/new.html.twig', array(
            'form' => $form->createView(),
        ));
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }





    /**
     * @Route("/film/{id}", name="film-view", requirements={"id"="\d+"})
     */
    public function viewAction(FilmManager $filmManager, $id, Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $film = $filmManager->getFilm($id);
        $user = $this->getUser();
        if(!empty($film)){
        /* AJOUT DE COMMENTAIRE  */
            $commentary = new Commentary();
            /* Default Values */
            $commentary->setIdWork((int)$id);
            $commentary->setType(1);
            $commentary->setCreatAd();
            $commentary->setUser((string) $user->getFirstname());
            /*************************************/
            $form = $this->createFormBuilder($commentary)
                ->add('commentary', TextareaType:: class, array(
                    'attr' => array(
                        'placeholder' => 'Commentaires',
                        'value' => '',
                    )))
                ->add('save', SubmitType::class, array('label' => 'Submit'))
                ->getForm();
            $form->handleRequest( $request );
            if ($form->isSubmitted() && $form->isValid()) {
                $commentary = $form->getData();
                $em->persist( $commentary );
                $em->flush();
            }
        /* *************************************** */
        /* VUE DES COMMENTAIRE PRECEDENTS */
            $messages = $em->getRepository(Commentary::class)
                ->findBy(
                    array(
                   'idWork' => $id,
                   'type' => 1
                ));

        /* *************************************** */
            return $this->render('media/film-view.html.twig', [
                'film' => $film,
                'form' => $form->createView(),
                'messages' => $messages

            ]);
        }
        else{
            throw new BadRequestHttpException( '404, Project not found.');
        }
    }


}
